# Hard Sphere tests
#
# Running time vs number of particles (cell list & verlet list)
#
# Constraints:
# - Fixed volume fraction
# - All particles with same radius and mass
# - Uniform initial particle distribution (Mersenne twister)
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: number of particles
#
[Config rt-vs-number-of-particles]

sim-time-limit                                  = 1000s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0
HardSpheresTest.manager.tkRefreshRate           = 0
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1

HardSpheresTest.manager.particleDistribution    = "densepacked"

HardSpheresTest.spaceSizeX                      = 1000
HardSpheresTest.spaceSizeY                      = 1000
HardSpheresTest.spaceSizeZ                      = 1000

HardSpheresTest.numberOfInitialMolecules        = 10000

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./rt-vs-number-of-particles.ini

# ---------------------------------------------------------------------------- #
#
# Running time vs particle distribution (cell list & verlet list)
#
# Constraints:
#
# Output graph:
# - Type: bars
# - Y axis: running time
# - X axis: particle distribution
#
[Config rt-vs-particle-distribution]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1         # cell-list

# HardSpheresTest.manager.particleDistribution  = "highdensity" # Scripted

HardSpheresTest.numberOfInitialMolecules        = 10000
HardSpheresTest.spaceSizeX                      = 1000
HardSpheresTest.spaceSizeY                      = 1000
HardSpheresTest.spaceSizeZ                      = 1000

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./rt-vs-particle-distribution.ini

# ---------------------------------------------------------------------------- #
#
# Running time vs space cell length (cell list & verlet list)
#
# Constraints:
# - Fixed number of particles N = 10000
# - Volume fraction of 0.15
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: space cell length
#
[Config rt-vs-space-cell-length]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1         # cell-list

HardSpheresTest.manager.particleDistribution    = "cube"

# HardSpheresTest.numberOfInitialMolecules      = 10000 # scripted
# HardSpheresTest.spaceSizeX                    = 1000 # scripted
# HardSpheresTest.spaceSizeY                    = 1000 # scripted
# HardSpheresTest.spaceSizeZ                    = 1000 # scripted

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./rt-vs-space-cell-length.ini

# ---------------------------------------------------------------------------- #
#
# Running time vs Verlet list radius (fixed optimum cell list length)
#
# Constraints:
# - Fixed number of particles N = 10000
# - Volume fraction of 0.15
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: verlet list radius
#
[Config rt-vs-verlet-list-radius]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 2         # verlet-list

HardSpheresTest.manager.particleDistribution    = "cube"
HardSpheresTest.manager.spaceCellSize           = 2

# HardSpheresTest.numberOfInitialMolecules      = 10000 # scripted
# HardSpheresTest.spaceSizeX                    = 1000 # scripted
# HardSpheresTest.spaceSizeY                    = 1000 # scripted
# HardSpheresTest.spaceSizeZ                    = 1000 # scripted

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./rt-vs-verlet-list-radius.ini

# ---------------------------------------------------------------------------- #
#
# Running time vs volume fraction (cell list & verlet list)
#
# Constraints:
# - Fixed number of particles N = 10000
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: volume fraction
#
[Config rt-vs-volume-fraction]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1         # cell-list

HardSpheresTest.manager.particleDistribution    = "cube"

# HardSpheresTest.numberOfInitialMolecules      = 10000 # scripted

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./rt-vs-volume-fraction.ini

# ---------------------------------------------------------------------------- #
#
# Number of collisions over simulation time
# 
# Distribution:
# - cube distribution
# - sphere surface distribution
# - densepacked distribution
#
# Constraints:
# - Fixed number of particles N = 10000
#
# Output graph:
# - Type: histogram (lines 2D)
# - Y axis: number of collisions
# - X axis: simulation time (seconds)
#
[Config number-collisions-over-simtime]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1         # cell-list

# HardSpheresTest.manager.particleDistribution  = "highdensity" # scripted
HardSpheresTest.manager.spaceCellSize           = 10

HardSpheresTest.numberOfInitialMolecules        = 10000
HardSpheresTest.spaceSizeX                      = 1000
HardSpheresTest.spaceSizeY                      = 1000
HardSpheresTest.spaceSizeZ                      = 1000

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./number-collisions-over-simtime.ini

# ---------------------------------------------------------------------------- #
#
# 3D space position over simulation time. A few big particles vs a lot of small
# particles
#
# Constraints:
#
# Output graph:
# - Type: lines 3D
# - Y axis: y coordinate
# - X axis: x coordinate
# - Z axis: z coordinate
[Config space-position-over-simtime]

sim-time-limit                                  = 100s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 100
HardSpheresTest.manager.mode                    = 1         # verlet-list

HardSpheresTest.manager.particleDistribution    = "densepacked"
HardSpheresTest.manager.spaceCellSize           = 2

# HardSpheresTest.numberOfInitialMolecules      = 10000
# HardSpheresTest.spaceSizeX                    = 1000
# HardSpheresTest.spaceSizeY                    = 1000
# HardSpheresTest.spaceSizeZ                    = 1000

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1
HardSpheresTest.molecule[*].listRadius          = 3

# Include file for batch simulations
# include ./space-position-over-simtime.ini

# ---------------------------------------------------------------------------- #
#
# Running time vs space cell length vs verlet list
#
# Constraints:
# - Fixed volume fraction (0.15 and 0.35)
# - Fixed number of particles (N = 10000)
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: space cell length / verlet radius
#
[Config rt-vs-space-cell-length-vs-verlet-radius]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 2         # verlet-list

HardSpheresTest.manager.particleDistribution    = "cube"

# HardSpheresTest.numberOfInitialMolecules      = 10000 # scripted
# HardSpheresTest.spaceSizeX                    = 1000 # scripted
# HardSpheresTest.spaceSizeY                    = 1000 # scripted
# HardSpheresTest.spaceSizeZ                    = 1000 # scripted

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./rt-vs-space-cell-length-vs-verlet-radius.ini

# ---------------------------------------------------------------------------- #
#
# Simulation memory usage
#
# Constraints:
# - Fixed volume fraction (0.15 and 0.35)
#
[Config sim-memory]

sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.manager.enableWebServer         = 0         # off
HardSpheresTest.manager.tkRefreshRate           = 0         # disabled
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1         # cell list
HardSpheresTest.manager.particleDistribution    = "cube"

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

# Include file for batch simulations
# include ./sim-memory.ini

# ---------------------------------------------------------------------------- #
#
# Test reticulated and densepacked particle distributions with different
# volumes
#
[Config sim-space-size-test]
sim-time-limit                                  = 900s
network                                         = HardSpheresTest

HardSpheresTest.numberOfInitialMolecules        = 10000

HardSpheresTest.manager.enableWebServer         = 0
HardSpheresTest.manager.tkRefreshRate           = 0
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

HardSpheresTest.molecule[*].vx                  = normal(0, 1)
HardSpheresTest.molecule[*].vy                  = normal(0, 1)
HardSpheresTest.molecule[*].vz                  = normal(0, 1)

HardSpheresTest.molecule[*].radius              = 1
HardSpheresTest.molecule[*].mass                = 1

HardSpheresTest.molecule[4999].logCollisions    = 1

# Include file for batch simulations
# include ./hard-spheres-test-script.ini

# ---------------------------------------------------------------------------- #
#
# Test how the number of collisions behaves when changing the temperature and 
# the density fraction
#
[Config temperature-density-fraction]
sim-time-limit                                  = 100s
network                                         = HardSpheresTest

HardSpheresTest.numberOfInitialMolecules        = 1000
HardSpheresTest.manager.particleDistribution    = "cube"

HardSpheresTest.manager.enableWebServer         = 0
HardSpheresTest.manager.tkRefreshRate           = 1000
HardSpheresTest.manager.statsRefreshRate        = 1000
HardSpheresTest.manager.mode                    = 1

HardSpheresTest.molecule[*].xpos                = -1
HardSpheresTest.molecule[*].ypos                = -1
HardSpheresTest.molecule[*].zpos                = -1

# Water molecule diameter in literature is 2.75 A
# 1 Angstrom = 1.0×10^-10 m = 0.1 nm
#
HardSpheresTest.molecule[*].radius              = 0.275/2 # nm

# Water molar mass is 18.01528(33) g/mol
# 1 mol = 6.02214078×10^23 ± 1.8×10−7×10^23
# mass = 2.99150736×10^-23 g
#
HardSpheresTest.molecule[*].mass                = 2.99150736*(10^-23)*(10^9) # ng

# Velocity is N(0, sigma²*I) where
# - I = 3×3 identity matrix
# - sigma² = (k_B*T)/m
# - k_B = 1.3806488×10^-23 the Boltzmann constant
#
# Note: velocity must use nm/ns units

# Log collisions from one particle
HardSpheresTest.molecule[500].logCollisions     = 1

# Include file for batch simulations
include ./hard-spheres-test-script.ini