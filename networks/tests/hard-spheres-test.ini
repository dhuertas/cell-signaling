# Hard Sphere tests
#
# Running time vs number of particles (cell list & verlet list)
#
# Constraints:
# - Fixed volume density
# - All particles with same radius and mass
# - Uniform initial particle distribution (Mersenne twister)
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: number of particles
#
[Config rt-vs-number-of-particles]

sim-time-limit = 1000s
network = HardSpheresTest

HardSpheresTest.manager.enableWebServer = 0
HardSpheresTest.manager.tkRefreshRate = 0
HardSpheresTest.manager.statsRefreshRate = 1000
HardSpheresTest.manager.mode = 1

#HardSpheresTest.manager.particleDistribution = "cube"
HardSpheresTest.manager.particleDistribution = "densepacked"

HardSpheresTest.spaceSizeX = 1000
HardSpheresTest.spaceSizeY = 1000
HardSpheresTest.spaceSizeZ = 1000

HardSpheresTest.numberOfInitialMolecules = 10000

HardSpheresTest.molecule[*].xpos = -1
HardSpheresTest.molecule[*].ypos = -1
HardSpheresTest.molecule[*].zpos = -1

HardSpheresTest.molecule[*].vx = normal(0, 1)
HardSpheresTest.molecule[*].vy = normal(0, 1)
HardSpheresTest.molecule[*].vz = normal(0, 1)

HardSpheresTest.molecule[*].radius = 1
HardSpheresTest.molecule[*].mass = 1

# Scripted parameters
# include ./rt-vs-number-of-particles.ini

#
# Running time vs particle distribution (cell list & verlet list)
#
# Constraints:
#
# Output graph:
# - Type: bars
# - Y axis: running time
# - X axis: particle distribution
#
[Config rt-vs-particle-distribution]

sim-time-limit 						= 900s
network 							= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 1 		# cell-list

# HardSpheresTest.manager.particleDistribution 	= "highdensity" # Scripted

HardSpheresTest.numberOfInitialMolecules		= 10000
HardSpheresTest.spaceSizeX						= 1000
HardSpheresTest.spaceSizeY						= 1000
HardSpheresTest.spaceSizeZ						= 1000

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./rt-vs-particle-distribution.ini

#
# Running time vs space cell length (cell list & verlet list)
#
# Constraints:
# - Fixed number of particles N = 10000
# - Volume density of 0.15
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: space cell length
#
[Config rt-vs-space-cell-length]

sim-time-limit 						= 900s
network 							= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 1 		# cell-list

HardSpheresTest.manager.particleDistribution 	= "cube"

# HardSpheresTest.numberOfInitialMolecules		= 10000 # scripted
# HardSpheresTest.spaceSizeX					= 1000 # scripted
# HardSpheresTest.spaceSizeY					= 1000 # scripted
# HardSpheresTest.spaceSizeZ					= 1000 # scripted

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./rt-vs-space-cell-length.ini

#
# Running time vs Verlet list radius (fixed optimum cell list length)
#
# Constraints:
# - Fixed number of particles N = 10000
# - Volume density of 0.15
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: verlet list radius
#
[Config rt-vs-verlet-list-radius]

sim-time-limit 						= 900s
network 							= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 2 		# verlet-list

HardSpheresTest.manager.particleDistribution 	= "cube"
HardSpheresTest.manager.spaceCellSize			= 2

# HardSpheresTest.numberOfInitialMolecules		= 10000 # scripted
# HardSpheresTest.spaceSizeX					= 1000 # scripted
# HardSpheresTest.spaceSizeY					= 1000 # scripted
# HardSpheresTest.spaceSizeZ					= 1000 # scripted

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./rt-vs-verlet-list-radius.ini

#
# Running time vs volume density (cell list & verlet list)
#
# Constraints:
# - Fixed number of particles N = 10000
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: volume density
#
[Config rt-vs-volume-density]

sim-time-limit 						= 900s
network 							= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 1 		# cell-list

HardSpheresTest.manager.particleDistribution 	= "cube"

# HardSpheresTest.numberOfInitialMolecules		= 10000 # scripted

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./rt-vs-volume-density.ini

#
# Number of collisions over simulation time (square distribution | dense distribution | sphere distribution | packed distribution)
#
# Constraints:
# - Fixed number of particles N = 10000
#
# Output graph:
# - Type: histogram (lines 2D)
# - Y axis: number of collisions
# - X axis: simulation time (seconds)
#
[Config number-collisions-over-simtime]

sim-time-limit 						= 900s
network 							= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 1 		# cell-list

# HardSpheresTest.manager.particleDistribution 	= "highdensity" # scripted
HardSpheresTest.manager.spaceCellSize			= 10

HardSpheresTest.numberOfInitialMolecules		= 10000
HardSpheresTest.spaceSizeX						= 1000
HardSpheresTest.spaceSizeY						= 1000
HardSpheresTest.spaceSizeZ						= 1000

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./number-collisions-over-simtime.ini

#
# 3D space position over simulation time (few big particles vs a lot of small particles)
#
# Constraints:
#
# Output graph:
# - Type: lines 3D
# - Y axis: y coordinate
# - X axis: x coordinate
# - Z axis: z coordinate
[Config space-position-over-simtime]

sim-time-limit 						= 100s
network 							= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 100
HardSpheresTest.manager.mode					= 1 		# verlet-list

HardSpheresTest.manager.particleDistribution 	= "densepacked"
HardSpheresTest.manager.spaceCellSize			= 2

# HardSpheresTest.numberOfInitialMolecules		= 10000
# HardSpheresTest.spaceSizeX						= 1000
# HardSpheresTest.spaceSizeY						= 1000
# HardSpheresTest.spaceSizeZ						= 1000

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1
HardSpheresTest.molecule[*].listRadius			= 3

# Scripted parameters
# include ./space-position-over-simtime.ini

#
# Running time vs space cell length vs verlet list
#
# Constraints:
# - Fixed volume density (0.15 and 0.35)
# - Fixed number of particles (N = 10000)
#
# Output graph:
# - Type: lines 2D
# - Y axis: running time
# - X axis: space cell length / verlet radius
#
[Config rt-vs-space-cell-length-vs-verlet-radius]

sim-time-limit						= 900s
network								= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 2 		# verlet-list

HardSpheresTest.manager.particleDistribution 	= "cube"

# HardSpheresTest.numberOfInitialMolecules		= 10000 # scripted
# HardSpheresTest.spaceSizeX					= 1000 # scripted
# HardSpheresTest.spaceSizeY					= 1000 # scripted
# HardSpheresTest.spaceSizeZ					= 1000 # scripted

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./rt-vs-space-cell-length-vs-verlet-radius.ini

#
# Simulation memory usage
#
# Constraints:
# - Fixed volume density (0.15 and 0.35)
#
[Config sim-memory]

sim-time-limit						= 900s
network								= HardSpheresTest

HardSpheresTest.manager.enableWebServer			= 0 		# off
HardSpheresTest.manager.tkRefreshRate			= 0 		# disabled
HardSpheresTest.manager.statsRefreshRate		= 1000
HardSpheresTest.manager.mode					= 1 		# cell list
HardSpheresTest.manager.particleDistribution 	= "cube"

HardSpheresTest.molecule[*].xpos				= -1
HardSpheresTest.molecule[*].ypos				= -1
HardSpheresTest.molecule[*].zpos				= -1

HardSpheresTest.molecule[*].vx					= normal(0, 1)
HardSpheresTest.molecule[*].vy					= normal(0, 1)
HardSpheresTest.molecule[*].vz					= normal(0, 1)

HardSpheresTest.molecule[*].radius				= 1
HardSpheresTest.molecule[*].mass				= 1

# Scripted parameters
# include ./sim-memory.ini

# Test reticulated and densepacked particle distributions with
# different simulation space sizes
#
[Config sim-space-size-test]
sim-time-limit = 900s
network = HardSpheresTest

HardSpheresTest.numberOfInitialMolecules = 10000

HardSpheresTest.manager.enableWebServer = 0
HardSpheresTest.manager.tkRefreshRate = 0
HardSpheresTest.manager.statsRefreshRate = 1000
HardSpheresTest.manager.mode = 1

HardSpheresTest.molecule[*].xpos = -1
HardSpheresTest.molecule[*].ypos = -1
HardSpheresTest.molecule[*].zpos = -1

HardSpheresTest.molecule[*].vx = normal(0, 1)
HardSpheresTest.molecule[*].vy = normal(0, 1)
HardSpheresTest.molecule[*].vz = normal(0, 1)

HardSpheresTest.molecule[*].radius = 1
HardSpheresTest.molecule[*].mass = 1

# Include file for batch simulations
include ./hard-spheres-test-script.ini