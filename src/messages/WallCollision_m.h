//
// Generated file, do not edit! Created by opp_msgc 4.2 from WallCollision.msg.
//

#ifndef _WALLCOLLISION_M_H_
#define _WALLCOLLISION_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>WallCollision.msg</tt> by opp_msgc.
 * <pre>
 * message WallCollisionMessage
 * {
 *     double x;
 *     double y;
 *     double z;
 * 
 *     double vx;
 *     double vy;
 *     double vz;
 * 
 *     double collisionTime;
 * }
 * </pre>
 */
class WallCollisionMessage : public ::cMessage
{
  protected:
    double x_var;
    double y_var;
    double z_var;
    double vx_var;
    double vy_var;
    double vz_var;
    double collisionTime_var;

  private:
    void copy(const WallCollisionMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WallCollisionMessage&);

  public:
    WallCollisionMessage(const char *name=NULL, int kind=0);
    WallCollisionMessage(const WallCollisionMessage& other);
    virtual ~WallCollisionMessage();
    WallCollisionMessage& operator=(const WallCollisionMessage& other);
    virtual WallCollisionMessage *dup() const {return new WallCollisionMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getX() const;
    virtual void setX(double x);
    virtual double getY() const;
    virtual void setY(double y);
    virtual double getZ() const;
    virtual void setZ(double z);
    virtual double getVx() const;
    virtual void setVx(double vx);
    virtual double getVy() const;
    virtual void setVy(double vy);
    virtual double getVz() const;
    virtual void setVz(double vz);
    virtual double getCollisionTime() const;
    virtual void setCollisionTime(double collisionTime);
};

inline void doPacking(cCommBuffer *b, WallCollisionMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WallCollisionMessage& obj) {obj.parsimUnpack(b);}


#endif // _WALLCOLLISION_M_H_
